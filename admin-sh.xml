<?xml version='1.0' encoding='utf-8'?>
<snippets language="sh">
  <snippet>
    <text><![CDATA[## Take a look under snippets section to find
## generic/application commands and scripts.]]></text>
    <description>aaMEMO</description>
  </snippet>
  <snippet>
    <text><![CDATA[awk '{if(NR==LINE_NUMBER) print $0}' file]]></text>
    <tag>pr1</tag>
    <description>awkPrinter</description>
  </snippet>
  <snippet>
    <text><![CDATA[#!/bin/bash
$0]]></text>
    <tag>bash</tag>
    <description>#!/bin/bash</description>
  </snippet>
  <snippet>
    <text><![CDATA[case ${1:choice} in
${2:first})
	$3
	;;
*)
	$4
	;;
esac]]></text>
    <tag>case</tag>
    <description>case ..</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##					Check Sum 			 ##
###############################

curl -0 https://fedoraproject.org/fedora.gpg

gpgv --keyring ./fedora.gpg image-v.v-CHECKSUM

sha256 -c fedora.gpg image-v.v-CHECKSUM


gpg2 --keyserver-options=auto-key-retrieve \
	--recv-key \
	--locate-keys torvalds@kernel.org gregkh@kernel.org

pgp.mit.edu
keys.gnupg.net



gpg --keyserver hkp://pgp.mit.edu --recv-keys]]></text>
    <tag>check1</tag>
    <description>chkSum</description>
  </snippet>
  <snippet>
    <text><![CDATA[#####################################
## Download whatever you need to dwld
## now:
## gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
## If you don't have the keys against the signature was
## done over the file, --locate their keys and vault them
## in a line, as above.
## Verify that the signature you has downloaded along with 
## the file/s you want are who they are.
## ]]></text>
    <tag>crip1</tag>
    <description>cripto1</description>
  </snippet>
  <snippet>
    <text><![CDATA[############# Cortar ##################
# corta la columna 4
#cut -c 4 texto.txt
# corta la columna 1 y 2
#cut -c 1,2 texto.txt
# corta 2 ultimos char de linea. Man rev.
#cat texto.txt |rev | cut -c 1,2 texto.txt |rev
# corta columna del 2 al 6
#cut -c 2-6 texto.txt
# corta columna del 1 al 3 y 5 al 8
#cut -c 1-3,5-8 texto.txt
# corta desde columna 2 hasta el final
#cut -c 2- texto.txt
# corta desde columna 7 hasta el principio
#cut -c -7 texto.txt
############# Delimitar ###############
# -z considera el final de la linea como EOF.
#cut -z -c 2-6 texto.txt
# 1. Selecciona espacio ' ' como delimitador
# 2. Cada 'palabra' es un campo[field]
#cut -d ' ' -f3
# Los campos(f) tambien pueden ser secuencias.
#cut -d ' ' -f1-3
# Los campos(f) inversos a la secuencia.
#cut -d ' ' -f1-3 --complement
# Cambiar delimitador de salida ' ' por '-'.
#cut -d ' ' -f1-3 --output-delimiter='-'
# La opcion -s omite linea sin delimitador.
######## Mostrar solo bytes #########
#cut -b 2 texto.txt












]]></text>
    <tag>cutter</tag>
    <description>cut</description>
  </snippet>
  <snippet>
    <text><![CDATA[date +'%d%m%y'

\$(date +'%d%m%y')]]></text>
    <tag>das1</tag>
    <description>dateSimple</description>
  </snippet>
  <snippet>
    <text><![CDATA[SOURCE=/home/raul/rpmbuild/BUILD/kernel-3.10.0-1160.118.1.el7/linux-3.10.0-1160.118.1.el7.x86_64

VMLINUX_GDB=/scripts/gdb/vmlinux-gdb.py

#ls --color -l \$SOURCE/scripts/ |less -RS

#ls --color -l \$SOURCE/scripts/{gdb,gdb/linux} |less -RS

#ls --color -lh \$SOURCE/scripts/gdb/linux/constants.py.in

#egrep -A 3 -B 1 -x 'FN_name' file

#egrep -d recurse \
#	--color=always \
#	'scripts' \$SOURCE/scripts/ |less -R
	
#################### 9055131
#gedit	\$SOURCE/\$VMLINUX_GDB
#diff -y Makefile ~/Downloads/Makefile-master |less]]></text>
    <tag>dbgBuild</tag>
    <description>dbgBuild</description>
  </snippet>
  <snippet>
    <text><![CDATA[dkms ACTION \
	-m module \
	-v version]]></text>
    <tag>dkm1</tag>
    <description>dkmsTemplate</description>
  </snippet>
  <snippet>
    <text><![CDATA[elif [[ ${1:condition} ]]; then
	$0]]></text>
    <tag>elif</tag>
    <description>elif ..</description>
  </snippet>
  <snippet>
    <text><![CDATA[free -h && sync &&  echo 3 > /proc/sys/vm/drop_caches && free -h]]></text>
    <tag>embuff</tag>
    <description>emptyBuf&amp;cache</description>
  </snippet>
  <snippet>
    <text><![CDATA[cat > file-name << EOF
#description-file
param-1:
	arg: |
		variable:value
	arg_1: val_1
EOF]]></text>
    <tag>eof1</tag>
    <description>EOFdocHere</description>
  </snippet>
  <snippet>
    <text><![CDATA[cat << EOF | grep 'b' | tee b.txt
#!/bin/bash
echo foo
echo bar
EOF]]></text>
    <tag>eof1</tag>
    <description>EOFpipeTofile</description>
  </snippet>
  <snippet>
    <text><![CDATA[cat << EOF > print.sh
#!/bin/bash
echo foo
echo bar
EOF]]></text>
    <tag>eof1</tag>
    <description>EOFtoFile</description>
  </snippet>
  <snippet>
    <text><![CDATA[var=$(cat << EOF
Write some
enchantings
here
EOF
)]]></text>
    <tag>eof1</tag>
    <description>EOFtoVAR</description>
  </snippet>
  <snippet>
    <text><![CDATA[zcat file.gz > file_extracted]]></text>
    <tag>gzf</tag>
    <description>extractGZ</description>
  </snippet>
  <snippet>
    <text><![CDATA[# Emergency mode on/off
#firewall-cmd [--panic-on|--panic-off]

# Reload to apply new configuration.
#firewall-cmd --reload

## test first and save to permanent later.
#firewall-cmd <option>
#firewall-cmd --runtime-to-permanent <option>

# FILES:
# /usr/lib/firewalld/*
# /etc/firewalld/*]]></text>
    <description>firewaldBasics</description>
  </snippet>
  <snippet>
    <text><![CDATA[## PORTS
# List all ports.
#firewall-cmd --list-ports]]></text>
    <description>firewaldPorts</description>
  </snippet>
  <snippet>
    <text><![CDATA[## SERVICES
# List all services.
#firewall-cmd --list-services

# Adding new services
#firewall-cmd --new-service=<new-service>

# Adding new services using a local file 
#firewall-cmd --new-service-from-file=new-service.xml]]></text>
    <description>firewaldServices</description>
  </snippet>
  <snippet>
    <text><![CDATA[## ZONES
# List relevant information for the default zone.
#firewall-cmd --list-all 

# List relevant information for specific zone.
#firewall-cmd --list-all --zone=home

# List relevant information for all zone.
#firewall-cmd --list-all-zones

# Get available zones
#firewall-cmd --get-zones

# Get active zones
#firewall-cmd --get-active-zones

# Get the current default zone
#firewall-cmd --get-default-zone

# Set the current default zone
#firewall-cmd --set-default-zone <noze-name>

# Assign a default zone to a network connection
# edit file: /etc/sysconfig/network-scripts/ifcfg-*
# ZONE=zone-name]]></text>
    <description>firewaldZones</description>
  </snippet>
  <snippet>
    <text><![CDATA[for (( ${1:i = 0}; ${2:i < 10}; ${3:i++} )); do
	$0
done]]></text>
    <tag>for</tag>
    <description>for .. done</description>
  </snippet>
  <snippet>
    <text><![CDATA[git config --global alias.last 'log -1 HEAD']]></text>
    <tag>addAlias</tag>
    <description>gitAddAlias</description>
  </snippet>
  <snippet>
    <text><![CDATA[git remote add helioPage http://github.com/heliogabalo]]></text>
    <tag>addHelio</tag>
    <description>gitAddRemote</description>
  </snippet>
  <snippet>
    <text><![CDATA[## Default Identity; name and email
#git config --global user.name "Raul Vilchez"
#git config --global user.email "r4u1974@gmail.com"

## Default editor
#git config --global core.editor "gedit --wait --new-window"

## Default branch name, i.e: main
#git config --global init.defaultBranch master

##
#git config --global color.status auto
#git config --global color.branch auto
#git config --global color.interactive auto
#git config --global color.diff auto

#git config --global core.excludesfile ~/.gitignore_global]]></text>
    <tag>gc1</tag>
    <description>gitConfig</description>
  </snippet>
  <snippet>
    <text><![CDATA[git branch develop, topic, dumbidea, iss42]]></text>
    <tag>gitB</tag>
    <description>gitCreateBranch</description>
  </snippet>
  <snippet>
    <text><![CDATA[git rev-list --left-right --boundary --pretty=oneline A...B]]></text>
    <description>gitExperiment</description>
  </snippet>
  <snippet>
    <text><![CDATA[git log --oneline --decorate --graph --all]]></text>
    <tag>gitdec</tag>
    <description>gitLogDecorate</description>
  </snippet>
  <snippet>
    <text><![CDATA[git log --oneline --decorate]]></text>
    <tag>gitdec</tag>
    <description>gitOnedecorate</description>
  </snippet>
  <snippet>
    <text><![CDATA[## Use this option while applying a patch
--whitespace=fix]]></text>
    <tag>gitTrail</tag>
    <description>gitTrailingSpaces</description>
  </snippet>
  <snippet>
    <text><![CDATA[

# List keys.
gpg --list-keys

# Generate a new key.
gpg --gen-key

# Edit
gpg --edit-key hash]]></text>
    <description>gpg</description>
  </snippet>
  <snippet>
    <text><![CDATA[glxinfo |grep -iE 'vendor:|device:|version:']]></text>
    <tag>gpuver</tag>
    <description>gpuVersion</description>
  </snippet>
  <snippet>
    <text><![CDATA[egrep -d recurse \
	--color=always \
	--exclude=pattern \
	'create_proc_read_entry' $SOURCE |less -R]]></text>
    <tag>gfn</tag>
    <description>grep4Fn</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##		list boot entries			 ##
###############################

grep "^menuentry" /boot/efi/EFI/centos/grub.cfg | cut -d "'" -f2]]></text>
    <tag>gre1</tag>
    <description>grepBootEntries</description>
  </snippet>
  <snippet>
    <text><![CDATA[egrep -A 3 -B 1 -x 'FN_name' file]]></text>
    <tag>gfn</tag>
    <description>grepFunction</description>
  </snippet>
  <snippet>
    <text><![CDATA[####################################################
## To see the complete man page, but skip to			##
## first occurrence. Next(N).                			##
####################################################

man bar |less +/-X]]></text>
    <tag>grepl</tag>
    <description>grepLess</description>
  </snippet>
  <snippet>
    <text><![CDATA[egrep ${1:linux} ${2:file.x} | awk -F '/' '{print \$2}'
$0]]></text>
    <tag>gre1</tag>
    <description>grepLinux</description>
  </snippet>
  <snippet>
    <text><![CDATA[####################################################
## The pattern hire is the '-X';      						##
## - The doble dash: -- indicates the end of 			##
## options.                                 	 		##
## - e options is for pattern.                		##
####################################################

man foo |grep -- -X]]></text>
    <tag>grepman1</tag>
    <description>grepMan</description>
  </snippet>
  <snippet>
    <text><![CDATA[## Search on all files, skip directories
egrep -d skip 'myText' $PATH/*]]></text>
    <tag>gre2</tag>
    <description>grepNoDirs</description>
  </snippet>
  <snippet>
    <text><![CDATA[#############################
		hard to replace multiline 
		with: &(cmd) >log &
		replace it with:
		>log & &(cmd)
#############################


mkfifo log
grep "something" log &
>log make target1 \
	--opt 1\
	--opt 2]]></text>
    <tag>gro</tag>
    <description>grepOfifo</description>
  </snippet>
  <snippet>
    <text><![CDATA[######################################
## action(-d) could be: read, skip, 
## and recurse to read all files under
## each   directory. man -d.
egrep -d recurse \$PATTERN \$MYPATH0]]></text>
    <tag>grep0</tag>
    <description>grepPatt</description>
  </snippet>
  <snippet>
    <text><![CDATA[# report audit logs for records from sshd
ausearch -c sshd

# It will report most recent info from /var/log/lastog
lastog

# Same as lastog, but from audit log /var/log/audit/audit.log
aulastlog

# It will search from /var/log/wtemp
last

# It will show bad logins attempts.
lastb]]></text>
    <description>hardening</description>
  </snippet>
  <snippet>
    <text><![CDATA[if [[ ${1:condition} ]]; then
	$0
fi]]></text>
    <tag>if</tag>
    <description>if .. then</description>
  </snippet>
  <snippet>
    <text><![CDATA[genisoimage -R \
	-appid str_vol_hdr \
	-ldots \
	-o /tmp/out_Image.iso \
	.]]></text>
    <tag>iso</tag>
    <description>isoGenImg</description>
  </snippet>
  <snippet>
    <text><![CDATA[# Show logs for specific unit file.
journalctl _SYSTEMD_UNIT=abrtd.service

# Verify the log integrity file.
journalctl --verify

# Show journal with custom fields and output:
journalctl \
	--reverse \
	--output=cat \
	_PID=<N> \
	_SYSTEMD_UNIT=UnitServiceName.service]]></text>
    <description>journaling</description>
  </snippet>
  <snippet>
    <text><![CDATA[ls -l | awk -F " " '{print \$1, \$3, \$9}' \


ls -l --color | awk -F " " '{print \$1, \$3, \$9}' |less -SR]]></text>
    <tag>see4</tag>
    <description>lsAwk</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##					dir across			 ##
###############################
ls --color -R --format=across . |less -R]]></text>
    <tag>see2</tag>
    <description>lsBoot</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##		list boot entries			 ##
###############################
## copia no dispares el mnemonico
## awk -F\' '$1=="menuentry " {print i++ " : "$2}' /boot/efi/EFI/centos/grub.cfg
awk -F\' '\$1=="menuentry " {print i++ " : "\$2}' /boot/efi/EFI/centos/grub.cfg]]></text>
    <tag>see3</tag>
    <description>lsBootEntries</description>
  </snippet>
  <snippet>
    <text><![CDATA[ls --group-directories-first \
	--color -ld \
	/sys/class/pci_bus/*/device/* \
	|less -RS]]></text>
    <tag>see5</tag>
    <description>lsBusDevice</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##					only dirs				 ##
###############################
ls -lAh . | grep -v "^d"	|less -NS

ls -l $SOURCE | grep "^d"	|less -SR]]></text>
    <tag>see1</tag>
    <description>lsFiles</description>
  </snippet>
  <snippet>
    <text><![CDATA[## Selected fields
lspci |cut -d ' ' -f1-3 |less]]></text>
    <tag>see5</tag>
    <description>lspciColumns</description>
  </snippet>
  <snippet>
    <text><![CDATA[# which driver on which device

lspci -knn]]></text>
    <tag>devdrv</tag>
    <description>lspci-DEV-DRV</description>
  </snippet>
  <snippet>
    <text><![CDATA[ls /sys/bus/pci_express/devices/ && \
ls /sys/bus/pci/devices/]]></text>
    <tag>lsPCIfact</tag>
    <description>lsPCIfacility</description>
  </snippet>
  <snippet>
    <text><![CDATA[lspci -tv]]></text>
    <tag>see5</tag>
    <description>lspciTreeView</description>
  </snippet>
  <snippet>
    <text><![CDATA[man vgcreate
man vdo
man lvmdiskscan
man vgscan
man vgextend]]></text>
    <tag>many</tag>
    <description>manGroup</description>
  </snippet>
  <snippet>
    <text><![CDATA[for i in ./*.md; do perl markdown.pl \
	--html4tags $i \
	> $(i%.*).html; done]]></text>
    <tag>m2h1</tag>
    <description>md2html</description>
  </snippet>
  <snippet>
    <text><![CDATA[##############################################
####### centos vault #########################
rpm -i http://vault.centos.org/7.9.2009/updates/ \
        Source/SPackages/kernel-3.10.0-1160.71.1.el7.src.rpm \
        2>&1 |grep -v 'exist'
##############################################]]></text>
    <tag>cent1</tag>
    <description>oldRepos</description>
  </snippet>
  <snippet>
    <text><![CDATA[# ==========================
# OpenSSL command line tool
# ==========================
# ENCRYPT AFTER TEST
openssl rsa -aes256 -in Name.key NameEncrypted.key
#
# ==========================
# Self-signed cert for localhost:
# ==========================
openssl req -x509 -sha256 -nodes -newkey rsa:2048 \
	-days 365 -keyout Name.key -out Name.crt
#
# ==========================	
# Add a password to a key; if generated with RSA, 
# else use dsa.
# ==========================
openssl rsa -aes256 -in Name.key NameEncrypted.key
mv NameEncrypted.crt Name.key
chmod 600 Name.key

# ==========================
# see TLSsnip to find some procedures to config
# Network Manager with this certificates.
# 
# ==========================
# CA defaults 
# ==========================
# 
openssl req -x509 -config  simplify-ca.cnf \
	-days 365 -newkey rsa:4096 \
	-sha256 -nodes \
	-out CA-name.pem \
	-outform PEM
#
# ==========================
# Dump certificate 
# ==========================
openssl x509 -in CA-name.pem -text -noout |less
# ==========================
# Test their purpose / INSPECT
# ==========================
openssl x509 -purpose -in CA-name.pem -inform PEM |less
# 
# ============================================
# 		Create Server Certificate Request 
# ============================================
# Omit the -x509 to create the request:
openssl req -config simplify-server.cnf \
	-newkey rsa:2048 \
	-sha256 -nodes \
	-out name-cert.csr \
	-outform PEM 
#
# ==========================
# 				 INSPECT
# ==========================
openssl req -text -noout -verify -in name-cert.csr |less
#
# ==========================
# SIGN the server certificate with the CA
# ==========================
openssl ca -config simplify-ca.cnf \
	-policy signing_policy \
	-extensions signing_req \
	-out name-cert.pem \
	-infiles name-cert.csr


]]></text>
    <description>openSSL</description>
  </snippet>
  <snippet>
    <text><![CDATA[pvs -o+pv_used]]></text>
    <tag>pvs1</tag>
    <description>PhysLvmUsed</description>
  </snippet>
  <snippet>
    <text><![CDATA[## print and cat to file. Cat to file_err
#	'cd ~/Repos/ckb-next-master && \
#	./quickinstall 2> ckb-next-err.log |tee build-out.log' |less -S
]]></text>
    <description>pipeErrorOut</description>
  </snippet>
  <snippet>
    <text><![CDATA[pkg-config \
	--print-provides \
	--debug
	pkg-config]]></text>
    <description>pkgConfig</description>
  </snippet>
  <snippet>
    <description>printThisLines</description>
  </snippet>
  <snippet>
    <text><![CDATA[pkill --signal 9 man]]></text>
    <tag>sot</tag>
    <description>processShutOff</description>
  </snippet>
  <snippet>
    <text><![CDATA[###################################
# Retrieve major number from 		  #
# /proc/devices									  #
###################################

awk "\\\$2==\"${1:modName}\" {print \\\$1}" /proc/devices


]]></text>
    <tag>pim</tag>
    <description>procIntMajor</description>
  </snippet>
  <snippet>
    <text><![CDATA[qemu-img create \
	-f img_typ file.img size[Unit]]]></text>
    <tag>qec</tag>
    <description>qemuCreate</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##			Recusion Depth			 ##
###############################
find /path/to/anywhere/ -maxdepth 1 -type d -exec ls -ld "{}" \;

# You can also pipe to a pager/file, and play with that:

			... d -exec ls -ld "{}" \; |less
			... d -exec ls > list.out]]></text>
    <tag>recdep</tag>
    <description>recursDepth</description>
  </snippet>
  <snippet>
    <text><![CDATA[rm -f ~/Documents/Txt/.snippets.sh & \
touch ~/Documents/Txt/.snippets.sh &]]></text>
    <tag>res</tag>
    <description>recycSnip</description>
  </snippet>
  <snippet>
    <text><![CDATA[## It doesn't work, it rises a 'unbound' plague.

set -u
cols="$(stty size | cut -d ' ' -f 2)" 
rows="$(stty size | cut -d ' ' -f 1)"
printf '\033[8;%d;%dt' "$rows" "$cols"]]></text>
    <description>resizeBashWind</description>
  </snippet>
  <snippet>
    <text><![CDATA[## rpm list with available packages
#cat ~/Documents/Logs/packages/centos-pkgs.log \
#	|grep quazip-qt5 \
#	|less -RSN]]></text>
    <description>rpmISO</description>
  </snippet>
  <snippet>
    <text><![CDATA[rpm -q \
	gcc libsdl* zlib* *alsa* \
	kernel* pkg-config \
	libgnutls* libpci* \
	> pkg_log
	
rpm -ql pkg]]></text>
    <tag>rpmlist</tag>
    <description>rpmList</description>
  </snippet>
  <snippet>
    <text><![CDATA[## Check the package under PGP
rpm --checksig pkg

## -i, Install the pkg.
## -v, Verbose option.
## -h, Show '#' sign when extacting.
rpm -ivh pkg

## Check dependencies
## -q, Query the pkg.
## -p, List the extras this pkg provides.
## -R, List the components this pkg depends.
rpm -qpR pkg

## List was has changed
rpm -q --changelog pkg |less -S

## Header info about package
rpm -qi pkg |less -S

## State fo Configuration Files
rpm -qcsf pkg

## Most recently installed pkg
rpm -qa --last |head

# Custom queries
rpm -qa --qf "%{tag_name}" pkg
rpm -qa --qf "%-20{NAME} %-20{PLATFORM}\n" pkg

## Display rpm tag
rpm --querytags |less -S

## Formatting arrys
rpm -q --queryformat "[%-50{FILENAMES}%{FILESIZES}\n]" pkg |less
rpm -q --queryformat "[%-15{=NAME}%-50{FILENAMES}\n]" pkg |less
rpm -q --qf "%{NAME}-%{VERSION}-%{RELEASE} %{INSTALLTIME:date}\n" pkg |less
rpm -q --qf "%{NAME} %|EPOCH?{%{EPOCH}}:{(no Epoch)}|\n" pkg |less
rpm -q --qrpm -q --queryformat "myString-%{VERSION}-%{RELEASE}\n" kerneueryformat "%{NAME}-%{VERSION}-%{RELEASE}\n" pkg
rpm -q --queryformat "%{VERSION}-%{RELEASE}\n" kernel

#### Formating. To query dependencies
rpm -q --qf \
	"[Cap-name: %{REQUIRENAME}\t Flags_a: %{REQUIREFLAGS}\t ver_a: %{REQUIREVERSION}\n]" \
	python |less

#### Formating. Querying for file information.
rpm -q --qf \
	"[%-15{=NAME} %-36{FILENAMES} %{FILEMODES:perms}\n]" \
	bash |less

### Package ## List version of RPM creator of the pkg:
rpm -qp --qf \
	"%{NAME}- rpm%{RPMVERSION}\n" *.rpm |less -S

## List requirements for a pkg, human readable
rpm -qp --qf \
	"[%{REQUIRENAME}%{REQUIREFLAGS:depflags}%{REQUIREVERSION}]\n"
	file.rpm




## dumps out extra info on files
rpm -q --dump bash |less -SR

## Pkg information
rpm -p --optionQuery fileName.rpm |less -SR

## Pkg information: -qp[l|c]
rpm -qp \
	/Path/to/file.rpm |less -SR

## Pkg information over the net. 
## Query pkg: -qp[l|c]
rpm -qp ftp://username:password@hostname:port/Path/to/file
rpm -qp ftp://username@hostname:port/Path/to/file
rpm -qp ftp://hostname:port/Path/to/file
rpm -qp http://hostname:port/Path/to/file

## Query dependencies
rpm -qp --requires $SOURCE |less

# What capabilities provides an installed pkg
#rpm -q --provides bash |less -RS

# What capabilities provides an uninstalled pkg
rpm -qp --provides $SOURCE |less -RS

# Check conflicts
rpm -q[p] --conflicts $SOURCE |less -S

# Rpm transaction ID on installation.
rpm -q --qf "%-20{NAME} %-20{INSTALLTID}\n" httpd |less

# Rpm transaction ID on uninstallation.
rpm -qa --qf "%-20{NAME} %-20{REMOVETID}\n" kernel |less

# Roll back transactions
rpm -U --rollback "3 months ago"




]]></text>
    <tag>rpmlist</tag>
    <description>rpmOthers</description>
  </snippet>
  <snippet>
    <text><![CDATA[###############################
##		search_filesNames_N		 ##
###############################
egrep \
	--color=always \
	-Hn 'BUILT_MODULE' /etc/dkms/dkms.conf \
	| less -RNS]]></text>
    <tag>find1</tag>
    <description>search_filNam</description>
  </snippet>
  <snippet>
    <text><![CDATA[# Print specific lines of a file:
#		- Print line 10 to 20
# 	- Intructions '21q' used to stop processing
###############################
sed -n '10,20p;21q' filename
#
#
# Print One Line
sed -n LINE_NUMBERp file



]]></text>
    <tag>se1</tag>
    <description>sedPrinter</description>
  </snippet>
  <snippet>
    <text><![CDATA[#GDBSTRING = 'CONFIG_GDB_SCRIPTS | CONFIG_DEBUG_INFO_REDUCED | CONFIG_FRAME_POIINTER'
IMGPOOL='https://landley.net/aboriginal/bin'
IMGPOOL_SYS='https://landley.net/aboriginal/downloads/binaries'

#cat /boot/config-3.10.0-1160.118.1.el7.x86_64 \
#	|grep --color=always \
#	--regexp=$GDBSTRING \
#	|less -R]]></text>
    <tag>sig</tag>
    <description>setupIMGdbg</description>
  </snippet>
  <snippet>
    <text><![CDATA[#!/bin/sh
$0]]></text>
    <tag>sh</tag>
    <description>shebang</description>
  </snippet>
  <snippet>
    <text><![CDATA[#!/bin/sh

####################################################
## call 	the specific one	from the sh						##
## snippets pool.																	##
## All predefined cmd should be found with a	 		##
## list of prefixes. This is not an exhaustive		##
## list:																					##
## see1 see2 see3 ...															##
## lsBoot lsAny2 lsAny2 ...												##
##  																							##
## /!\ Alert with bash globals.										##
####################################################]]></text>
    <tag>hds</tag>
    <description>snipHeader</description>
  </snippet>
  <snippet>
    <text><![CDATA[# Lists public key parameters
ssh-add -L

# (verify)Lists fingerprints of identities
ssh-add -l

# Start or restart SSH aagent
eval $(ssh-agent)

# Add ssh key to the agent.
ssh-add ~/.ssh/id_rsa 

# SSH agent environment variable
echo $SSH_AUTH_SOCK

# Set environment variable in current session.
export $SSH_AUTH_SOCK]]></text>
    <tag>sshkeys</tag>
    <description>sshKeys</description>
  </snippet>
  <snippet>
    <text><![CDATA[## TLS Authentication 

# === Config Network Manager to use tls certs ===
# Set the Extensible Authentication Protocol(EAP) to tls
# and the path to the client certificate and key file.
nmcli connection modify \
	enp5s0 802-1x.eap tls \
	802-1x.client-cert /etc/pki/tls/certs/vilchez.crt \
	802-1x.private-key /etc/pki/tls/private/vilchez.key

# Set the path to the CA certificate.
nmcli connection modify \
	enp5s0 802-1x.ca-cert /etc/pki/tls/certs/ca-bundle.crt
	
# Set the identity of the user used in the certificate.
nmcli connection modify \
	enp5s0 802-1x.identity r4u1974@gmail.com
	
# ====== config without CA ========	
# Documentation states the definition of 
# client-cert and private-key	to be implemented on
# a single shot: that association should be made
# in the same line. 
nmcli connection add type ethernet \
	con-name "wired-802.1x" \
	ifname enp5s0 802-1x.eap peap \
	802-1x.identity 'r4u1974@gmail.com' \
	802-1x.client-cert '/etc/pki/client.crt' \
	802-1x.private-key '/etc/pki/client.key' \
	802-1x.phase2-auth mschapv2 ipv4.method auto \
	]]></text>
    <description>TLSsnip</description>
  </snippet>
  <snippet>
    <text><![CDATA[top -d 5 -b |grep 'load average' -A 12

## or call top, and then press n <numProcs>
## you can also save that config with 'W'.]]></text>
    <tag>tog</tag>
    <description>topGrepped</description>
  </snippet>
  <snippet>
    <text><![CDATA[mkdir -p /home/raul/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros]]></text>
    <tag>dtree</tag>
    <description>treeStructDir</description>
  </snippet>
  <snippet>
    <text><![CDATA[MYPATH0=/home/raul/rpmbuild/BUILD/kernel-3.10.0-1160.118.1.el7/linux-3.10.0-1160.118.1.el7.x86_64/include/linux
MYPATH=/root/Documents/Txt/out
MYPATH2=/root/Documents/ldd3_pdf/scull-master
PATTERN='module.h'
PATTERN2='module,moduleparam,init,kernel,slab,fs,errno,types,proc_fs,fcntl,seq_file,cdev']]></text>
    <tag>sc1</tag>
    <description>varsB1</description>
  </snippet>
  <snippet>
    <text><![CDATA[KERNEL=/usr/src/vdo/Aboriginal/system-image-x86_64/linux
INITRD=/usr/src/vdo/Aboriginal/system-image-x86_64/rootfs.cpio.gz

virt-install \
	--dry-run \
	--print-xml \
	--name aboriginal-vm \
	--memory 2048 \
	--vcpus 2 \
	--boot kernel=$KERNEL,initrd=$INITRD,kernel_args="panic=1, console=ttyS0, HOST=x86_64 $KERNEL_EXTRA", $QEMU_EXTRA \
	--disk none \
	--import \
	--noreboot \
	--check disk_size=on \
	--graphics none \
	--os-type Linux \
	--os-variant ubuntu18.04 ]]></text>
    <description>VMbootOpt</description>
  </snippet>
  <snippet>
    <text><![CDATA[virt-clone \
	--original Centos-9-Stream \
	--name C9S-clone-example \
	--auto-clone 
#	--file /path/to]]></text>
    <tag>vmClone</tag>
    <description>VMclone</description>
  </snippet>
  <snippet>
    <text><![CDATA[##CENTOS
SOURCE1=cloud.centos.org/centos/7/images/
SOURCE=mirror.stream.centos.org/9-stream/
#	image-index
#		or
#	image-index.asc

##FEDORA
SOURCE2=fedoraproject.org/cloud/download
SOURCEFEDORA=download.fedoraproject.org/pub/fedora/linux/releases/40/Cloud/x86_64/images/Fedora-Cloud-Base-Generic.x86_64-40-1.14.qcow2
SOURCEFEDORA2=http://download.fedoraproject.org/pub/fedora/linux/releases/25/Server/x86_64/os
#	curl -0 https://fedoraproject.org/fedora.gpg

##DEIAN
SOURCE3=http://ftp.us.debian.org/debian/dists/stable/main/installer-amd64/

##UBUNTU
SOURCE4=cloud-images.ubuntu.com/releases/bionic/release/
SOURCE5=http://us.archive.ubuntu.com/ubuntu/dists/wily/main/installer-amd64/
#	NMD5SUMS
#	NMD5SUMS.gpg





## watching log
# watch tail -n 1 wget.log

wget \
	-o file.log \
	-O file-Image.qcow2 \]]></text>
    <tag>img</tag>
    <description>VMcloudRes</description>
  </snippet>
  <snippet>
    <text><![CDATA[# Undefine and remove all storage
virsh undefine vmName --remove-all-storage

# Vm's Related files.
virsh vmName |grep path

## Paths where file are stored
/path/to/installed-image
/var/lib/libvirt/images/]]></text>
    <description>VMdelete</description>
  </snippet>
  <snippet>
    <text><![CDATA[virt-install \
	--name dist-vm \
	--memory 2048 \
	--vcpus 2 \
	--disk /usr/src/vdo/SOfileCloud.qcow2 \
	--disk size=10 \
	--disk seed.iso \
	--import \
	--graphics none \
	--os-type Linux \
	--os-variant dist30.0]]></text>
    <tag>vinst</tag>
    <description>VMimport</description>
  </snippet>
  <snippet>
    <text><![CDATA[## Check the os-variant:
##	osinfo-query os |grep osName |less -R

virt-install \
	--connect qemu:///system \
	--name centos-vm \
	--memory 2048 \
	--vcpus 2 \
	--disk size=10 \
	--graphics none \
	--os-type Linux \
	--os-variant centos7.0 \
	--cdrom /usr/src/vdo/centos-7.qcow2]]></text>
    <tag>vinst</tag>
    <description>VMinstall</description>
  </snippet>
  <snippet>
    <text><![CDATA[genisoimage \
	-output Machine-Cxt/VmName/seed.iso \
	-volid cidata \
	-joliet \
	-rational-rock Machine-Cxt/VmName/{user-data,meta-data}

## Check the os-variant:
##	osinfo-query os |grep osName |less -R]]></text>
    <tag>geniso</tag>
    <description>VMiso</description>
  </snippet>
  <snippet>
    <text><![CDATA[## starts the domain

virsh --connect qemu:///system start vmName;
virsh console --domain vmName]]></text>
    <tag>virdom</tag>
    <description>VMstartDomain</description>
  </snippet>
  <snippet>
    <text><![CDATA[## You should use the seed.iso as a
## CDROM.
## WARNING  WARNING  WARNING 
## yaml files do not accept TABS.

genisoimage \
	-output seed.iso \
	-volid cidata \
	-joliet \ # Windows onlyq
	-rock user-data.txt meda-data
	
##### meta-data
instance-id: id-name [ie. worker]
local-hostname: host-name

##### user-data
#cloud-config
groups:
	- admingroup: [root,sys]
	- cloud-users
	
users:
	- default
	- name: name
		gecos: Real name
		primary_group: groupName
		groups: groupName
		selinux_user: staff_u
		expiredate: '2030-09-01'
		ssh_import_id:
			- lp:someName
			- gh:OtherRealName
		lock_passwd: false
		passwd: 

## this doesn't work
chpasswd:
	list: |
		user: passwd
	expire: False
	
## this works
password: aaAA11!!
chpasswd:
 expire: False]]></text>
    <description>VMuserConfig</description>
  </snippet>
</snippets>
